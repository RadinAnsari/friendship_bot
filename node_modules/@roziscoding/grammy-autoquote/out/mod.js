"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.autoQuote = exports.addReplyParam = void 0;
const addReplyParam = (ctx) => {
    const transformer = (prev, method, payload, signal) => {
        var _a, _b;
        if (
        // If we're not calling a "send" method
        !method.startsWith("send") ||
            // If we're calling "sendChatAction", which doesn't tak "reply_to_message_id"
            method === "sendChatAction" ||
            // If a reply to message id is already set
            "reply_to_message_id" in payload) {
            // Do nothing
            return prev(method, payload, signal);
        }
        if (
        // If the payload contains a chat_id
        payload.chat_id &&
            // And it's different from the chat_id that initiated the interaction
            payload.chat_id !== ((_a = ctx.msg) === null || _a === void 0 ? void 0 : _a.chat.id)) {
            // Do nothing
            return prev(method, payload, signal);
        }
        return prev(method, { ...payload, reply_to_message_id: (_b = ctx.msg) === null || _b === void 0 ? void 0 : _b.message_id }, signal);
    };
    return transformer;
};
exports.addReplyParam = addReplyParam;
const autoQuote = async (ctx, next) => {
    ctx.api.config.use((0, exports.addReplyParam)(ctx));
    await next();
};
exports.autoQuote = autoQuote;
