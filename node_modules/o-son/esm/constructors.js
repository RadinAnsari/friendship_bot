// deno-lint-ignore-file no-explicit-any no-explicit-any
import * as dntShim from "./_dnt.shims.js";
export const PLAIN_OBJECT_LABEL = "";
export const GLOBAL_CONSTRUCTOR_MAP = globalConstructorMap();
const enc = new dntShim.TextEncoder();
const dec8 = new dntShim.TextDecoder("utf-8");
export function globalConstructorMap() {
    const error = {
        instance: Error,
        from: (err) => {
            const res = [err.name, err.message];
            if (err.stack !== undefined)
                res.push(err.stack);
            if (err.cause !== undefined) {
                if (err.stack === undefined)
                    res.push(undefined);
                res.push(err.cause);
            }
            return res;
        },
        stub: () => new Error(),
        hydrate: (err, [name, message, stack, cause]) => {
            err.name = name;
            err.message = message;
            if (stack === undefined)
                delete err.stack;
            else
                err.stack = stack;
            if (cause !== undefined)
                err.cause = cause;
        },
    };
    const uint8Array = {
        instance: Uint8Array,
        from: (arr) => [btoa(dec8.decode(arr))],
        create: ([data]) => enc.encode(atob(data)),
    };
    const map = {
        instance: Map,
        from: (m) => [...m.entries()],
        stub: () => new Map(),
        hydrate: (m, entries) => entries.forEach(([k, v]) => m.set(k, v)),
    };
    const set = {
        instance: Set,
        from: (s) => [...s.values()],
        stub: () => new Set(),
        hydrate: (s, values) => values.forEach((v) => s.add(v)),
    };
    const date = {
        instance: Date,
        from: (d) => [d.toJSON()],
        create: ([json]) => new Date(json),
    };
    const regex = {
        instance: RegExp,
        from: ({ source, flags }) => flags ? [source, flags] : [source],
        create: ([source, flags]) => new RegExp(source, flags),
    };
    const url = {
        instance: URL,
        from: (url) => [url.href],
        create: ([href]) => new URL(href),
    };
    const res = new Map();
    const constructors = [error, uint8Array, map, set, date, regex, url];
    for (const c of constructors)
        res.set(c.instance.name, c);
    return res;
}
