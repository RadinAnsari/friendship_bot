export type ConstructorMap<C = any> = Map<string, SerializableConstructor<C>>;
export type SerializableConstructor<C, V = any> = ValueConstructor<C, V> | BucketContructor<C, V>;
export interface DecomposableConstructor<C, V = any> {
    instance: new () => C;
    from: (instance: C) => V[];
}
export interface ValueConstructor<C, V = any> extends DecomposableConstructor<C, V> {
    create: (val: V[]) => void;
}
export interface BucketContructor<C, V = any> extends DecomposableConstructor<C, V> {
    stub: () => C;
    hydrate: (stub: C, val: V[]) => void;
}
export declare const PLAIN_OBJECT_LABEL = "";
export declare const GLOBAL_CONSTRUCTOR_MAP: ConstructorMap<any>;
export declare function globalConstructorMap(): ConstructorMap<any>;
