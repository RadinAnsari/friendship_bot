"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.globalConstructorMap = exports.GLOBAL_CONSTRUCTOR_MAP = exports.PLAIN_OBJECT_LABEL = void 0;
// deno-lint-ignore-file no-explicit-any no-explicit-any
const dntShim = __importStar(require("./_dnt.shims.js"));
exports.PLAIN_OBJECT_LABEL = "";
exports.GLOBAL_CONSTRUCTOR_MAP = globalConstructorMap();
const enc = new dntShim.TextEncoder();
const dec8 = new dntShim.TextDecoder("utf-8");
function globalConstructorMap() {
    const error = {
        instance: Error,
        from: (err) => {
            const res = [err.name, err.message];
            if (err.stack !== undefined)
                res.push(err.stack);
            if (err.cause !== undefined) {
                if (err.stack === undefined)
                    res.push(undefined);
                res.push(err.cause);
            }
            return res;
        },
        stub: () => new Error(),
        hydrate: (err, [name, message, stack, cause]) => {
            err.name = name;
            err.message = message;
            if (stack === undefined)
                delete err.stack;
            else
                err.stack = stack;
            if (cause !== undefined)
                err.cause = cause;
        },
    };
    const uint8Array = {
        instance: Uint8Array,
        from: (arr) => [btoa(dec8.decode(arr))],
        create: ([data]) => enc.encode(atob(data)),
    };
    const map = {
        instance: Map,
        from: (m) => [...m.entries()],
        stub: () => new Map(),
        hydrate: (m, entries) => entries.forEach(([k, v]) => m.set(k, v)),
    };
    const set = {
        instance: Set,
        from: (s) => [...s.values()],
        stub: () => new Set(),
        hydrate: (s, values) => values.forEach((v) => s.add(v)),
    };
    const date = {
        instance: Date,
        from: (d) => [d.toJSON()],
        create: ([json]) => new Date(json),
    };
    const regex = {
        instance: RegExp,
        from: ({ source, flags }) => flags ? [source, flags] : [source],
        create: ([source, flags]) => new RegExp(source, flags),
    };
    const url = {
        instance: URL,
        from: (url) => [url.href],
        create: ([href]) => new URL(href),
    };
    const res = new Map();
    const constructors = [error, uint8Array, map, set, date, regex, url];
    for (const c of constructors)
        res.set(c.instance.name, c);
    return res;
}
exports.globalConstructorMap = globalConstructorMap;
